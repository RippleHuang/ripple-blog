(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{652:function(n,t,e){"use strict";e.r(t);var a=e(4),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"一、单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、单例模式"}},[n._v("#")]),n._v(" 一、单例模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("保证一个类仅有一个实例，并提供一个访问它的全局访问点")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("确保只有一个实例，并提供全局访问")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("假设要设置一个管理员，多次调用也仅设置一次，我们可以使用闭包缓存一个内部变量来实现这个单例")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function SetManager(name) {\n    this.manager = name;\n}\n\nSetManager.prototype.getName = function() {\n    console.log(this.manager);\n};\n\nvar SingletonSetManager = (function() {\n    var manager = null;\n\n    return function(name) {\n        if (!manager) {\n            manager = new SetManager(name);\n        }\n\n        return manager;\n    } \n})();\n\nSingletonSetManager('a').getName(); // a\nSingletonSetManager('b').getName(); // a\nSingletonSetManager('c').getName(); // a\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("这是比较简单的做法，但是假如我们还要设置一个HR呢？就得复制一遍代码了")]),n._v(" "),e("p",[n._v("所以，可以改写单例内部，实现地更通用一些")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 提取出通用的单例\nfunction getSingleton(fn) {\n    var instance = null;\n\n    return function() {\n        if (!instance) {\n            instance = fn.apply(this, arguments);\n        }\n\n        return instance;\n    }\n}\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("再进行调用，结果还是一样")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 获取单例\nvar managerSingleton = getSingleton(function(name) {\n    var manager = new SetManager(name);\n    return manager;\n});\n\nmanagerSingleton('a').getName(); // a\nmanagerSingleton('b').getName(); // a\nmanagerSingleton('c').getName(); // a\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("这时，我们添加HR时，就不需要更改获取单例内部的实现了，仅需要实现添加HR所需要做的，再调用即可")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function SetHr(name) {\n    this.hr = name;\n}\n\nSetHr.prototype.getName = function() {\n    console.log(this.hr);\n};\n\nvar hrSingleton = getSingleton(function(name) {\n    var hr = new SetHr(name);\n    return hr;\n});\n\nhrSingleton('aa').getName(); // aa\nhrSingleton('bb').getName(); // aa\nhrSingleton('cc').getName(); // aa\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("或者，仅想要创建一个div层，不需要将对象实例化，直接调用函数")]),n._v(" "),e("p",[n._v("结果为页面中仅有第一个创建的div")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function createPopup(html) {\n    var div = document.createElement('div');\n    div.innerHTML = html;\n    document.body.append(div);\n\n    return div;\n}\n\nvar popupSingleton = getSingleton(function() {\n    var div = createPopup.apply(this, arguments);\n    return div;\n});\n\nconsole.log(\n    popupSingleton('aaa').innerHTML,\n    popupSingleton('bbb').innerHTML,\n    popupSingleton('bbb').innerHTML\n); // aaa  aaa  aaa\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("h2",{attrs:{id:"二、策略模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、策略模式"}},[n._v("#")]),n._v(" 二、策略模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("将算法的使用和算法的实现分离开来。")]),n._v(" "),e("p",[n._v("一个基于策略模式的程序至少由两部分组成：")]),n._v(" "),e("p",[n._v("第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。")]),n._v(" "),e("p",[n._v("第二个部分是环境类Context，Context接受客户的请求，随后把请求委托给某一个策略类。要做到这点，说明Context 中要维持对某个策略对象的引用")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("策略模式可以用于组合一系列算法，也可用于组合一系列业务规则")]),n._v(" "),e("p",[n._v("假设需要通过成绩等级来计算学生的最终得分，每个成绩等级有对应的加权值。我们可以利用对象字面量的形式直接定义这个组策略")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 加权映射关系\nvar levelMap = {\n    S: 10,\n    A: 8,\n    B: 6,\n    C: 4\n};\n\n// 组策略\nvar scoreLevel = {\n    basicScore: 80,\n\n    S: function() {\n        return this.basicScore + levelMap['S']; \n    },\n\n    A: function() {\n        return this.basicScore + levelMap['A']; \n    },\n\n    B: function() {\n        return this.basicScore + levelMap['B']; \n    },\n\n    C: function() {\n        return this.basicScore + levelMap['C']; \n    }\n}\n\n// 调用\nfunction getScore(level) {\n    return scoreLevel[level] ? scoreLevel[level]() : 0;\n}\n\nconsole.log(\n    getScore('S'),\n    getScore('A'),\n    getScore('B'),\n    getScore('C'),\n    getScore('D')\n); // 90 88 86 84 0\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("在组合业务规则方面，比较经典的是表单的验证方法。这里列出比较关键的部分")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 错误提示\nvar errorMsgs = {\n    default: '输入数据格式不正确',\n    minLength: '输入数据长度不足',\n    isNumber: '请输入数字',\n    required: '内容不为空'\n};\n\n// 规则集\nvar rules = {\n    minLength: function(value, length, errorMsg) {\n        if (value.length < length) {\n            return errorMsg || errorMsgs['minLength']\n        }\n    },\n    isNumber: function(value, errorMsg) {\n        if (!/\\d+/.test(value)) {\n            return errorMsg || errorMsgs['isNumber'];\n        }\n    },\n    required: function(value, errorMsg) {\n        if (value === '') {\n            return errorMsg || errorMsgs['required'];\n        }\n    }\n};\n\n// 校验器\nfunction Validator() {\n    this.items = [];\n};\n\nValidator.prototype = {\n    constructor: Validator,\n    \n    // 添加校验规则\n    add: function(value, rule, errorMsg) {\n        var arg = [value];\n\n        if (rule.indexOf('minLength') !== -1) {\n            var temp = rule.split(':');\n            arg.push(temp[1]);\n            rule = temp[0];\n        }\n\n        arg.push(errorMsg);\n\n        this.items.push(function() {\n            // 进行校验\n            return rules[rule].apply(this, arg);\n        });\n    },\n    \n    // 开始校验\n    start: function() {\n        for (var i = 0; i < this.items.length; ++i) {\n            var ret = this.items[i]();\n            \n            if (ret) {\n                console.log(ret);\n                // return ret;\n            }\n        }\n    }\n};\n\n// 测试数据\nfunction testTel(val) {\n    return val;\n}\n\nvar validate = new Validator();\n\nvalidate.add(testTel('ccc'), 'isNumber', '只能为数字'); // 只能为数字\nvalidate.add(testTel(''), 'required'); // 内容不为空\nvalidate.add(testTel('123'), 'minLength:5', '最少5位'); // 最少5位\nvalidate.add(testTel('12345'), 'minLength:5', '最少5位');\n\nvar ret = validate.start();\n\nconsole.log(ret);\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[e("strong",[n._v("4. 优缺点")])]),n._v(" "),e("p",[e("strong",[n._v("优点")])]),n._v(" "),e("p",[n._v("可以有效地避免多重条件语句，将一系列方法封装起来也更直观，利于维护")]),n._v(" "),e("p",[e("strong",[n._v("缺点")])]),n._v(" "),e("p",[n._v("往往策略集会比较多，我们需要事先就了解定义好所有的情况")]),n._v(" "),e("h2",{attrs:{id:"三、代理模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、代理模式"}},[n._v("#")]),n._v(" 三、代理模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("为一个对象提供一个代用品或占位符，以便控制对它的访问")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("当客户不方便直接访问一个 对象或者不满足需要的时候，提供一个替身对象 来控制对这个对象的访问，客户实际上访问的是 替身对象。")]),n._v(" "),e("p",[n._v("替身对象对请求做出一些处理之后， 再把请求转交给本体对象")]),n._v(" "),e("p",[n._v("代理和本体的接口具有一致性，本体定义了关键功能，而代理是提供或拒绝对它的访问，或者在访问本体之前做一 些额外的事情")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("代理模式主要有三种：保护代理、虚拟代理、缓存代理")]),n._v(" "),e("p",[n._v("保护代理主要实现了访问主体的限制行为，以过滤字符作为简单的例子")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 主体，发送消息\nfunction sendMsg(msg) {\n    console.log(msg);\n}\n\n// 代理，对消息进行过滤\nfunction proxySendMsg(msg) {\n    // 无消息则直接返回\n    if (typeof msg === 'undefined') {\n        console.log('deny');\n        return;\n    }\n    \n    // 有消息则进行过滤\n    msg = ('' + msg).replace(/泥\\s*煤/g, '');\n\n    sendMsg(msg);\n}\n\n\nsendMsg('泥煤呀泥 煤呀'); // 泥煤呀泥 煤呀\nproxySendMsg('泥煤呀泥 煤'); // 呀\nproxySendMsg(); // deny\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("它的意图很明显，在访问主体之前进行控制，没有消息的时候直接在代理中返回了，拒绝访问主体，这数据保护代理的形式")]),n._v(" "),e("p",[n._v("有消息的时候对敏感字符进行了处理，这属于虚拟代理的模式")]),n._v(" "),e("p",[n._v("虚拟代理在控制对主体的访问时，加入了一些额外的操作")]),n._v(" "),e("p",[n._v("在滚动事件触发的时候，也许不需要频繁触发，我们可以引入函数节流，这是一种虚拟代理的实现")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 函数防抖，频繁操作中不处理，直到操作完成之后（再过 delay 的时间）才一次性处理\nfunction debounce(fn, delay) {\n    delay = delay || 200;\n    \n    var timer = null;\n\n    return function() {\n        var arg = arguments;\n          \n        // 每次操作时，清除上次的定时器\n        clearTimeout(timer);\n        timer = null;\n        \n        // 定义新的定时器，一段时间后进行操作\n        timer = setTimeout(function() {\n            fn.apply(this, arg);\n        }, delay);\n    }\n};\n\nvar count = 0;\n\n// 主体\nfunction scrollHandle(e) {\n    console.log(e.type, ++count); // scroll\n}\n\n// 代理\nvar proxyScrollHandle = (function() {\n    return debounce(scrollHandle, 500);\n})();\n\nwindow.onscroll = proxyScrollHandle;\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("缓存代理可以为一些开销大的运算结果提供暂时的缓存，提升效率")]),n._v(" "),e("p",[n._v("来个栗子，缓存加法操作")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 主体\nfunction add() {\n    var arg = [].slice.call(arguments);\n\n    return arg.reduce(function(a, b) {\n        return a + b;\n    });\n}\n\n// 代理\nvar proxyAdd = (function() {\n    var cache = [];\n\n    return function() {\n        var arg = [].slice.call(arguments).join(',');\n        \n        // 如果有，则直接从缓存返回\n        if (cache[arg]) {\n            return cache[arg];\n        } else {\n            var ret = add.apply(this, arguments);\n            return ret;\n        }\n    };\n})();\n\nconsole.log(\n    add(1, 2, 3, 4),\n    add(1, 2, 3, 4),\n\n    proxyAdd(10, 20, 30, 40),\n    proxyAdd(10, 20, 30, 40)\n); // 10 10 100 100\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("h2",{attrs:{id:"四、迭代器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、迭代器模式"}},[n._v("#")]),n._v(" 四、迭代器模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("JS中数组的map forEach 已经内置了迭代器")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("[1, 2, 3].forEach(function(item, index, arr) {\n    console.log(item, index, arr);\n});\n")])])]),e("p",[n._v("不过对于对象的遍历，往往不能与数组一样使用同一的遍历代码")]),n._v(" "),e("p",[n._v("我们可以封装一下")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function each(obj, cb) {\n    var value;\n\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; ++i) {\n            value = cb.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n                break;\n            }\n        }\n    } else {\n        for (var i in obj) {\n            value = cb.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n                break;\n            }\n        }\n    }\n}\n\neach([1, 2, 3], function(index, value) {\n    console.log(index, value);\n});\n\neach({a: 1, b: 2}, function(index, value) {\n    console.log(index, value);\n});\n\n// 0 1\n// 1 2\n// 2 3\n\n// a 1\n// b 2\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("再来看一个例子，强行地使用迭代器，来了解一下迭代器也可以替换频繁的条件语句")]),n._v(" "),e("p",[n._v("虽然例子不太好，但在其他负责的分支判断情况下，也是值得考虑的")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function getManager() {\n    var year = new Date().getFullYear();\n\n    if (year <= 2000) {\n        console.log('A');\n    } else if (year >= 2100) {\n        console.log('C');\n    } else {\n        console.log('B');\n    }\n}\n\ngetManager(); // B\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("将每个条件语句拆分出逻辑函数，放入迭代器中迭代")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function year2000() {\n    var year = new Date().getFullYear();\n\n    if (year <= 2000) {\n        console.log('A');\n    }\n\n    return false;\n}\n\nfunction year2100() {\n    var year = new Date().getFullYear();\n\n    if (year >= 2100) {\n        console.log('C');\n    }\n\n    return false;\n}\n\nfunction year() {\n    var year = new Date().getFullYear();\n\n    if (year > 2000 && year < 2100) {\n        console.log('B');\n    }\n\n    return false;\n}\n\nfunction iteratorYear() {\n    for (var i = 0; i < arguments.length; ++i) {\n        var ret = arguments[i]();\n\n        if (ret !== false) {\n            return ret;\n        }\n    }\n}\n\nvar manager = iteratorYear(year2000, year2100, year); // B\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("h2",{attrs:{id:"五、发布-订阅模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、发布-订阅模式"}},[n._v("#")]),n._v(" 五、发布-订阅模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("也称作观察者模式，定义了对象间的一种一对多的依赖关系，当一个对象的状态发 生改变时，所有依赖于它的对象都将得到通知")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。")]),n._v(" "),e("p",[n._v("与传统的发布-订阅模式实现方式（将订阅者自身当成引用传入发布者）不同，在JS中通常使用注册回调函数的形式来订阅")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("JS中的事件就是经典的发布-订阅模式的实现")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 订阅\ndocument.body.addEventListener('click', function() {\n    console.log('click1');\n}, false);\n\ndocument.body.addEventListener('click', function() {\n    console.log('click2');\n}, false);\n\n// 发布\ndocument.body.click(); // click1  click2\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("自己实现一下")]),n._v(" "),e("p",[n._v("小A在公司C完成了笔试及面试，小B也在公司C完成了笔试。他们焦急地等待结果，每隔半天就电话询问公司C，导致公司C很不耐烦。")]),n._v(" "),e("p",[n._v("一种解决办法是 AB直接把联系方式留给C，有结果的话C自然会通知AB")]),n._v(" "),e("p",[n._v("这里的“询问”属于显示调用，“留给”属于订阅，“通知”属于发布")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 观察者\nvar observer = {\n    // 订阅集合\n    subscribes: [],\n\n    // 订阅\n    subscribe: function(type, fn) {\n        if (!this.subscribes[type]) {\n            this.subscribes[type] = [];\n        }\n        \n        // 收集订阅者的处理\n        typeof fn === 'function' && this.subscribes[type].push(fn);\n    },\n\n    // 发布  可能会携带一些信息发布出去\n    publish: function() {\n        var type = [].shift.call(arguments),\n            fns = this.subscribes[type];\n        \n        // 不存在的订阅类型，以及订阅时未传入处理回调的\n        if (!fns || !fns.length) {\n            return;\n        }\n        \n        // 挨个处理调用\n        for (var i = 0; i < fns.length; ++i) {\n            fns[i].apply(this, arguments);\n        }\n    },\n    \n    // 删除订阅\n    remove: function(type, fn) {\n        // 删除全部\n        if (typeof type === 'undefined') {\n            this.subscribes = [];\n            return;\n        }\n\n        var fns = this.subscribes[type];\n\n        // 不存在的订阅类型，以及订阅时未传入处理回调的\n        if (!fns || !fns.length) {\n            return;\n        }\n\n        if (typeof fn === 'undefined') {\n            fns.length = 0;\n            return;\n        }\n\n        // 挨个处理删除\n        for (var i = 0; i < fns.length; ++i) {\n            if (fns[i] === fn) {\n                fns.splice(i, 1);\n            }\n        }\n    }\n};\n\n// 订阅岗位列表\nfunction jobListForA(jobs) {\n    console.log('A', jobs);\n}\n\nfunction jobListForB(jobs) {\n    console.log('B', jobs);\n}\n\n// A订阅了笔试成绩\nobserver.subscribe('job', jobListForA);\n// B订阅了笔试成绩\nobserver.subscribe('job', jobListForB);\n\n\n// A订阅了笔试成绩\nobserver.subscribe('examinationA', function(score) {\n    console.log(score);\n});\n\n// B订阅了笔试成绩\nobserver.subscribe('examinationB', function(score) {\n    console.log(score);\n});\n\n// A订阅了面试结果\nobserver.subscribe('interviewA', function(result) {\n    console.log(result);\n});\n\nobserver.publish('examinationA', 100); // 100\nobserver.publish('examinationB', 80); // 80\nobserver.publish('interviewA', '备用'); // 备用\n\nobserver.publish('job', ['前端', '后端', '测试']); // 输出A和B的岗位\n\n\n// B取消订阅了笔试成绩\nobserver.remove('examinationB');\n// A都取消订阅了岗位\nobserver.remove('job', jobListForA);\n\nobserver.publish('examinationB', 80); // 没有可匹配的订阅，无输出\nobserver.publish('job', ['前端', '后端', '测试']); // 输出B的岗位\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[e("strong",[n._v("4. 优缺点")])]),n._v(" "),e("p",[e("strong",[n._v("优点")])]),n._v(" "),e("p",[n._v("一为时间上的解耦，二为对象之间的解耦。可以用在异步编程中与MV*框架中")]),n._v(" "),e("p",[e("strong",[n._v("缺点")])]),n._v(" "),e("p",[n._v("创建订阅者本身要消耗一定的时间和内存，订阅的处理函数不一定会被执行，驻留内存有性能开销")]),n._v(" "),e("p",[n._v("弱化了对象之间的联系，复杂的情况下可能会导致程序难以跟踪维护和理解")]),n._v(" "),e("h2",{attrs:{id:"六、命令模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、命令模式"}},[n._v("#")]),n._v(" 六、命令模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系")]),n._v(" "),e("p",[n._v("命令（command）指的是一个执行某些特定事情的指令")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("命令中带有execute执行、undo撤销、redo重做等相关命令方法，建议显示地指示这些方法名")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("简单的命令模式实现可以直接使用对象字面量的形式定义一个命令")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var incrementCommand = {\n    execute: function() {\n        // something\n    }\n};\n")])])]),e("p",[n._v("不过接下来的例子是一个自增命令，提供执行、撤销、重做功能")]),n._v(" "),e("p",[n._v("采用对象创建处理的方式，定义这个自增")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自增\nfunction IncrementCommand() {\n    // 当前值\n    this.val = 0;\n    // 命令栈\n    this.stack = [];\n    // 栈指针位置\n    this.stackPosition = -1;\n};\n\nIncrementCommand.prototype = {\n    constructor: IncrementCommand,\n\n    // 执行\n    execute: function() {\n        this._clearRedo();\n        \n        // 定义执行的处理\n        var command = function() {\n            this.val += 2;\n        }.bind(this);\n        \n        // 执行并缓存起来\n        command();\n        \n        this.stack.push(command);\n\n        this.stackPosition++;\n\n        this.getValue();\n    },\n    \n    canUndo: function() {\n        return this.stackPosition >= 0;\n    },\n    \n    canRedo: function() {\n        return this.stackPosition < this.stack.length - 1;\n    },\n\n    // 撤销\n    undo: function() {\n        if (!this.canUndo()) {\n            return;\n        }\n        \n        this.stackPosition--;\n\n        // 命令的撤销，与执行的处理相反\n        var command = function() {\n            this.val -= 2;\n        }.bind(this);\n        \n        // 撤销后不需要缓存\n        command();\n\n        this.getValue();\n    },\n    \n    // 重做\n    redo: function() {\n        if (!this.canRedo()) {\n            return;\n        }\n        \n        // 执行栈顶的命令\n        this.stack[++this.stackPosition]();\n\n        this.getValue();\n    },\n    \n    // 在执行时，已经撤销的部分不能再重做\n    _clearRedo: function() {\n        this.stack = this.stack.slice(0, this.stackPosition + 1);\n    },\n    \n    // 获取当前值\n    getValue: function() {\n        console.log(this.val);\n    }\n};\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("再实例化进行测试，模拟执行、撤销、重做的操作")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var incrementCommand = new IncrementCommand();\n\n// 模拟事件触发，执行命令\nvar eventTrigger = {\n    // 某个事件的处理中，直接调用命令的处理方法\n    increment: function() {\n        incrementCommand.execute();\n    },\n\n    incrementUndo: function() {\n        incrementCommand.undo();\n    },\n\n    incrementRedo: function() {\n        incrementCommand.redo();\n    }\n};\n\n\neventTrigger['increment'](); // 2\neventTrigger['increment'](); // 4\n\neventTrigger['incrementUndo'](); // 2\n\neventTrigger['increment'](); // 4\n\neventTrigger['incrementUndo'](); // 2\neventTrigger['incrementUndo'](); // 0\neventTrigger['incrementUndo'](); // 无输出\n\neventTrigger['incrementRedo'](); // 2\neventTrigger['incrementRedo'](); // 4\neventTrigger['incrementRedo'](); // 无输出\n\neventTrigger['increment'](); // 6\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("此外，还可以实现简单的宏命令（一系列命令的集合）")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var MacroCommand = {\n    commands: [],\n\n    add: function(command) {\n        this.commands.push(command);\n\n        return this;\n    },\n\n    remove: function(command) {\n        if (!command) {\n            this.commands = [];\n            return;\n        }\n\n        for (var i = 0; i < this.commands.length; ++i) {\n            if (this.commands[i] === command) {\n                this.commands.splice(i, 1);\n            }\n        }\n    },\n\n    execute: function() {\n        for (var i = 0; i < this.commands.length; ++i) {\n            this.commands[i].execute();\n        }\n    }\n};\n\nvar showTime = {\n    execute: function() {\n        console.log('time');\n    }\n};\n\nvar showName = {\n    execute: function() {\n        console.log('name');\n    }\n};\n\nvar showAge = {\n    execute: function() {\n        console.log('age');\n    }\n};\n\nMacroCommand.add(showTime).add(showName).add(showAge);\n\nMacroCommand.remove(showName);\n\nMacroCommand.execute(); // time age\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("h2",{attrs:{id:"七、组合模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、组合模式"}},[n._v("#")]),n._v(" 七、组合模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("是用小的子对象来构建更大的 对象，而这些小的子对象本身也许是由更小 的“孙对象”构成的。")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("可以用树形结构来表示这种“部分- 整体”的层次结构。")]),n._v(" "),e("p",[n._v("调用组合对象 的execute方法，程序会递归调用组合对象 下面的叶对象的execute方法")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/688270/201808/688270-20180810130111913-1574024010.png",alt:"img"}})]),n._v(" "),e("p",[n._v("但要注意的是，组合模式不是父子关系，它是一种HAS-A（聚合）的关系，将请求委托给 它所包含的所有叶对象。基于这种委托，就需要保证组合对象和叶对象拥有相同的 接口")]),n._v(" "),e("p",[n._v("此外，也要保证用一致的方式对待 列表中的每个叶对象，即叶对象属于同一类，不需要过多特殊的额外操作")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("使用组合模式来实现扫描文件夹中的文件")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 文件夹 组合对象\nfunction Folder(name) {\n    this.name = name;\n    this.parent = null;\n    this.files = [];\n}\n\nFolder.prototype = {\n    constructor: Folder,\n\n    add: function(file) {\n        file.parent = this;\n        this.files.push(file);\n\n        return this;\n    },\n\n    scan: function() {\n        // 委托给叶对象处理\n        for (var i = 0; i < this.files.length; ++i) {\n            this.files[i].scan();\n        }\n    },\n\n    remove: function(file) {\n        if (typeof file === 'undefined') {\n            this.files = [];\n            return;\n        }\n\n        for (var i = 0; i < this.files.length; ++i) {\n            if (this.files[i] === file) {\n                this.files.splice(i, 1);\n            }\n        }\n    }\n};\n\n// 文件 叶对象\nfunction File(name) {\n    this.name = name;\n    this.parent = null;\n}\n\nFile.prototype = {\n    constructor: File,\n\n    add: function() {\n        console.log('文件里面不能添加文件');\n    },\n\n    scan: function() {\n        var name = [this.name];\n        var parent = this.parent;\n\n        while (parent) {\n            name.unshift(parent.name);\n            parent = parent.parent;\n        }\n\n        console.log(name.join(' / '));\n    }\n};\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("构造好组合对象与叶对象的关系后，实例化，在组合对象中插入组合或叶对象")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var web = new Folder('Web');\nvar fe = new Folder('前端');\nvar css = new Folder('CSS');\nvar js = new Folder('js');\nvar rd = new Folder('后端');\n\nweb.add(fe).add(rd);\n\nvar file1 = new File('HTML权威指南.pdf');\nvar file2 = new File('CSS权威指南.pdf');\nvar file3 = new File('JavaScript权威指南.pdf');\nvar file4 = new File('MySQL基础.pdf');\nvar file5 = new File('Web安全.pdf');\nvar file6 = new File('Linux菜鸟.pdf');\n\ncss.add(file2);\nfe.add(file1).add(file3).add(css).add(js);\nrd.add(file4).add(file5);\nweb.add(file6);\n\nrd.remove(file4);\n\n// 扫描\nweb.scan();\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("扫描结果为")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/688270/201808/688270-20180810134809099-1727124887.png",alt:"img"}})]),n._v(" "),e("p",[e("strong",[n._v("4. 优缺点")])]),n._v(" "),e("p",[e("strong",[n._v("优点")])]),n._v(" "),e("p",[n._v("可 以方便地构造一棵树来表示对象的部分-整体 结构。在树的构造最终 完成之后，只需要通过请求树的最顶层对 象，便能对整棵树做统一一致的操作。")]),n._v(" "),e("p",[e("strong",[n._v("缺点")])]),n._v(" "),e("p",[n._v("创建出来的对象长得都差不多，可能会使代码不好理解，创建太多的对象对性能也会有一些影响")]),n._v(" "),e("h2",{attrs:{id:"八、模板方法模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、模板方法模式"}},[n._v("#")]),n._v(" 八、模板方法模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("在抽象父类中封装子类的算法框架，它的 init方法可作为一个算法的模板，指导子类以何种顺序去执行哪些方法。")]),n._v(" "),e("p",[n._v("由父类分离出公共部分，要求子类重写某些父类的（易变化的）抽象方法")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("模板方法模式一般的实现方式为继承")]),n._v(" "),e("p",[n._v("以运动作为例子，运动有比较通用的一些处理，这部分可以抽离开来，在父类中实现。具体某项运动的特殊性则有自类来重写实现。")]),n._v(" "),e("p",[n._v("最终子类直接调用父类的模板函数来执行")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 体育运动\nfunction Sport() {\n\n}\n\nSport.prototype = {\n    constructor: Sport,\n    \n    // 模板，按顺序执行\n    init: function() {\n        this.stretch();\n        this.jog();\n        this.deepBreath();\n        this.start();\n\n        var free = this.end();\n        \n        // 运动后还有空的话，就拉伸一下\n        if (free !== false) {\n            this.stretch();\n        }\n        \n    },\n    \n    // 拉伸\n    stretch: function() {\n        console.log('拉伸');\n    },\n    \n    // 慢跑\n    jog: function() {\n        console.log('慢跑');\n    },\n    \n    // 深呼吸\n    deepBreath: function() {\n        console.log('深呼吸');\n    },\n\n    // 开始运动\n    start: function() {\n        throw new Error('子类必须重写此方法');\n    },\n\n    // 结束运动\n    end: function() {\n        console.log('运动结束');\n    }\n};\n\n// 篮球\nfunction Basketball() {\n\n}\n\nBasketball.prototype = new Sport();\n\n// 重写相关的方法\nBasketball.prototype.start = function() {\n    console.log('先投上几个三分');\n};\n\nBasketball.prototype.end = function() {\n    console.log('运动结束了，有事先走一步');\n    return false;\n};\n\n\n// 马拉松\nfunction Marathon() {\n\n}\n\nMarathon.prototype = new Sport();\n\nvar basketball = new Basketball();\nvar marathon = new Marathon();\n\n// 子类调用，最终会按照父类定义的顺序执行\nbasketball.init();\nmarathon.init();\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/688270/201808/688270-20180810175832079-2143812978.png",alt:"img"}})]),n._v(" "),e("h2",{attrs:{id:"九、享元模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九、享元模式"}},[n._v("#")]),n._v(" 九、享元模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("享元（flyweight）模式是一种用于性能优化的模式，它的目标是尽量减少共享对象的数量")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("运用共享技术来有效支持大量细粒度的对象。")]),n._v(" "),e("p",[n._v("强调将对象的属性划分为内部状态（属性）与外部状态（属性）。内部状态用于对象的共享，通常不变；而外部状态则剥离开来，由具体的场景决定。")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("在程序中使用了大量的相似对象时，可以利用享元模式来优化，减少对象的数量")]),n._v(" "),e("p",[n._v("举个栗子，要对某个班进行身体素质测量，仅测量身高体重来评判")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 健康测量\nfunction Fitness(name, sex, age, height, weight) {\n    this.name = name;\n    this.sex = sex;\n    this.age = age;\n    this.height = height;\n    this.weight = weight;\n}\n\n// 开始评判\nFitness.prototype.judge = function() {\n    var ret = this.name + ': ';\n\n    if (this.sex === 'male') {\n        ret += this.judgeMale();\n    } else {\n        ret += this.judgeFemale();\n    }\n\n    console.log(ret);\n};\n\n// 男性评判规则\nFitness.prototype.judgeMale = function() {\n    var ratio = this.height / this.weight;\n\n    return this.age > 20 ? (ratio > 3.5) : (ratio > 2.8);\n};\n\n// 女性评判规则\nFitness.prototype.judgeFemale = function() {\n    var ratio = this.height / this.weight;\n    \n    return this.age > 20 ? (ratio > 4) : (ratio > 3);\n};\n\n\nvar a = new Fitness('A', 'male', 18, 160, 80);\nvar b = new Fitness('B', 'male', 21, 180, 70);\nvar c = new Fitness('C', 'female', 28, 160, 80);\nvar d = new Fitness('D', 'male', 18, 170, 60);\nvar e = new Fitness('E', 'female', 18, 160, 40);\n\n// 开始评判\na.judge(); // A: false\nb.judge(); // B: false\nc.judge(); // C: false\nd.judge(); // D: true\ne.judge(); // E: true\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("评判五个人就需要创建五个对象，一个班就几十个对象")]),n._v(" "),e("p",[n._v("可以将对象的公共部分（内部状态）抽离出来，与外部状态独立。将性别看做内部状态即可，其他属性都属于外部状态。")]),n._v(" "),e("p",[n._v("这么一来我们只需要维护男和女两个对象（使用factory对象），而其他变化的部分则在外部维护（使用manager对象）")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 健康测量\nfunction Fitness(sex) {\n    this.sex = sex;\n}\n\n// 工厂，创建可共享的对象\nvar FitnessFactory = {\n    objs: [],\n\n    create: function(sex) {\n        if (!this.objs[sex]) {\n            this.objs[sex] = new Fitness(sex);\n        }\n\n        return this.objs[sex];\n    }\n};\n\n// 管理器，管理非共享的部分\nvar FitnessManager = {\n    fitnessData: {},\n    \n    // 添加一项\n    add: function(name, sex, age, height, weight) {\n        var fitness = FitnessFactory.create(sex);\n        \n        // 存储变化的数据\n        this.fitnessData[name] = {\n            age: age,\n            height: height,\n            weight: weight\n        };\n\n        return fitness;\n    },\n    \n    // 从存储的数据中获取，更新至当前正在使用的对象\n    updateFitnessData: function(name, obj) {\n        var fitnessData = this.fitnessData[name];\n\n        for (var item in fitnessData) {\n            if (fitnessData.hasOwnProperty(item)) {\n                obj[item] = fitnessData[item];\n            }\n        }\n    }\n};\n\n// 开始评判\nFitness.prototype.judge = function(name) {\n    // 操作前先更新当前状态（从外部状态管理器中获取）\n    FitnessManager.updateFitnessData(name, this);\n\n    var ret = name + ': ';\n\n    if (this.sex === 'male') {\n        ret += this.judgeMale();\n    } else {\n        ret += this.judgeFemale();\n    }\n\n    console.log(ret);\n};\n\n// 男性评判规则\nFitness.prototype.judgeMale = function() {\n    var ratio = this.height / this.weight;\n\n    return this.age > 20 ? (ratio > 3.5) : (ratio > 2.8);\n};\n\n// 女性评判规则\nFitness.prototype.judgeFemale = function() {\n    var ratio = this.height / this.weight;\n    \n    return this.age > 20 ? (ratio > 4) : (ratio > 3);\n};\n\n\nvar a = FitnessManager.add('A', 'male', 18, 160, 80);\nvar b = FitnessManager.add('B', 'male', 21, 180, 70);\nvar c = FitnessManager.add('C', 'female', 28, 160, 80);\nvar d = FitnessManager.add('D', 'male', 18, 170, 60);\nvar e = FitnessManager.add('E', 'female', 18, 160, 40);\n\n// 开始评判\na.judge('A'); // A: false\nb.judge('B'); // B: false\nc.judge('C'); // C: false\nd.judge('D'); // D: true\ne.judge('E'); // E: true\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("不过代码可能更复杂了，这个例子可能还不够充分，只是展示了享元模式如何实现，它节省了多个相似的对象，但多了一些操作。")]),n._v(" "),e("p",[n._v("factory对象有点像单例模式，只是多了一个sex的参数，如果没有内部状态，则没有参数的factory对象就更接近单例模式了")]),n._v(" "),e("h2",{attrs:{id:"十、职责链模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十、职责链模式"}},[n._v("#")]),n._v(" 十、职责链模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链 传递该请求，直到有一个对象处理它为止")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("请求发送者只需要知道链中的第一个节点，弱化发送者和一组接收者之间的强联系，可以便捷地在职责链中增加或删除一个节点，同样地，指定谁是第一个节点也很便捷")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("以展示不同类型的变量为例，设置一条职责链，可以免去多重if条件分支")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 定义链的某一项\nfunction ChainItem(fn) {\n    this.fn = fn;\n    this.next = null;\n}\n\nChainItem.prototype = {\n    constructor: ChainItem,\n    \n    // 设置下一项\n    setNext: function(next) {\n        this.next = next;\n        return next;\n    },\n    \n    // 开始执行\n    start: function() {\n        this.fn.apply(this, arguments);\n    },\n    \n    // 转到链的下一项执行\n    toNext: function() {\n        if (this.next) {\n            this.start.apply(this.next, arguments);\n        } else {\n            console.log('无匹配的执行项目');\n        }\n    }\n};\n\n// 展示数字\nfunction showNumber(num) {\n    if (typeof num === 'number') {\n        console.log('number', num);\n    } else {\n        // 转移到下一项\n        this.toNext(num);\n    }\n}\n\n// 展示字符串\nfunction showString(str) {\n    if (typeof str === 'string') {\n        console.log('string', str);\n    } else {\n        this.toNext(str);\n    }\n}\n\n// 展示对象\nfunction showObject(obj) {\n    if (typeof obj === 'object') {\n        console.log('object', obj);\n    } else {\n        this.toNext(obj);\n    }\n}\n\nvar chainNumber = new ChainItem(showNumber);\nvar chainString = new ChainItem(showString);\nvar chainObject = new ChainItem(showObject);\n\n// 设置链条\nchainObject.setNext(chainNumber).setNext(chainString);\n\nchainString.start('12'); // string 12\nchainNumber.start({}); // 无匹配的执行项目\nchainObject.start({}); // object {}\nchainObject.start(123); // number 123\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("这时想判断未定义的时候呢，直接加到链中即可")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 展示未定义\nfunction showUndefined(obj) {\n    if (typeof obj === 'undefined') {\n        console.log('undefined');\n    } else {\n        this.toNext(obj);\n    }\n}\n\nvar chainUndefined = new ChainItem(showUndefined);\nchainString.setNext(chainUndefined);\n\nchainNumber.start(); // undefined\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("由例子可以看到，使用了职责链后，由原本的条件分支换成了很多对象，虽然结构更加清晰了，但在一定程度上可能会影响到性能，所以要注意避免过长的职责链。")]),n._v(" "),e("h2",{attrs:{id:"十一、中介者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十一、中介者模式"}},[n._v("#")]),n._v(" 十一、中介者模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("所有的相关 对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知中介者对象即可")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("使网状的多对多关系变成了相对简单的一对多关系（复杂的调度处理都交给中介者）")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/688270/201808/688270-20180810203810861-1292637448.png",alt:"img"}})]),n._v(" "),e("p",[n._v("使用中介者后")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/688270/201808/688270-20180810203755778-500873457.png",alt:"img"}})]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("多个对象，指的不一定得是实例化的对象，也可以将其理解成互为独立的多个项。当这些项在处理时，需要知晓并通过其他项的数据来处理。")]),n._v(" "),e("p",[n._v("如果每个项都直接处理，程序会非常复杂，修改某个地方就得在多个项内部修改")]),n._v(" "),e("p",[n._v("我们将这个处理过程抽离出来，封装成中介者来处理，各项需要处理时，通知中介者即可。")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var A = {\n    score: 10,\n\n    changeTo: function(score) {\n        this.score = score;\n\n        // 自己获取\n        this.getRank();\n    },\n    \n    // 直接获取\n    getRank: function() {\n        var scores = [this.score, B.score, C.score].sort(function(a, b) {\n            return a < b;\n        });\n\n        console.log(scores.indexOf(this.score) + 1);\n    }\n};\n\nvar B = {\n    score: 20,\n\n    changeTo: function(score) {\n        this.score = score;\n\n        // 通过中介者获取\n        rankMediator(B);\n    }\n};\n\nvar C = {\n    score: 30,\n\n    changeTo: function(score) {\n        this.score = score;\n\n        rankMediator(C);\n    }\n};\n\n// 中介者，计算排名\nfunction rankMediator(person) {\n    var scores = [A.score, B.score, C.score].sort(function(a, b) {\n        return a < b;\n    });\n\n    console.log(scores.indexOf(person.score) + 1);\n}\n\n// A通过自身来处理\nA.changeTo(100); // 1\n\n// B和C交由中介者处理\nB.changeTo(200); // 1\nC.changeTo(50); // 3\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("ABC三个人分数改变后想要知道自己的排名，在A中自己处理，而B和C使用了中介者。B和C将更为轻松，整体代码也更简洁")]),n._v(" "),e("p",[n._v("最后，虽然中介者做到了对模块和对象的解耦，但有时对象之间的关系并非一定要解耦，强行使用中介者来整合，可能会使代码更为繁琐，需要注意。")]),n._v(" "),e("h2",{attrs:{id:"十二、装饰者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十二、装饰者模式"}},[n._v("#")]),n._v(" 十二、装饰者模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("以动态地给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象。")]),n._v(" "),e("p",[n._v("是一种“即用即付”的方式，能够在不改变对 象自身的基础上，在程序运行期间给对象动态地 添加职责")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("是为对象动态加入行为，经过多重包装，可以形成一条装饰链")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("最简单的装饰者，就是重写对象的属性")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var A = {\n    score: 10\n};\n\nA.score = '分数：' + A.score;\n")])])]),e("p",[n._v("可以使用传统面向对象的方法来实现装饰，添加技能")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function Person() {}\n\nPerson.prototype.skill = function() {\n    console.log('数学');\n};\n\n// 装饰器，还会音乐\nfunction MusicDecorator(person) {\n    this.person = person;\n}\n\nMusicDecorator.prototype.skill = function() {\n    this.person.skill();\n    console.log('音乐');\n};\n\n// 装饰器，还会跑步\nfunction RunDecorator(person) {\n    this.person = person;\n}\n\nRunDecorator.prototype.skill = function() {\n    this.person.skill();\n    console.log('跑步');\n};\n\nvar person = new Person();\n\n// 装饰一下\nvar person1 = new MusicDecorator(person);\nperson1 = new RunDecorator(person1);\n\nperson.skill(); // 数学\nperson1.skill(); // 数学 音乐 跑步\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("在JS中，函数为一等对象，所以我们也可以使用更通用的装饰函数")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 装饰器，在当前函数执行前先执行另一个函数\nfunction decoratorBefore(fn, beforeFn) {\n    return function() {\n        var ret = beforeFn.apply(this, arguments);\n        \n        // 在前一个函数中判断，不需要执行当前函数\n        if (ret !== false) {\n            fn.apply(this, arguments);\n        }\n    };\n}\n\n\nfunction skill() {\n    console.log('数学');\n}\n\nfunction skillMusic() {\n    console.log('音乐');\n}\n\nfunction skillRun() {\n    console.log('跑步');\n}\n\nvar skillDecorator = decoratorBefore(skill, skillMusic);\nskillDecorator = decoratorBefore(skillDecorator, skillRun);\n\nskillDecorator(); // 跑步 音乐 数学\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("h2",{attrs:{id:"十三、状态模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十三、状态模式"}},[n._v("#")]),n._v(" 十三、状态模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("事物内部状态的改变往往会带来事物的行为改变。在处理的时候，将这个处理委托给当前的状态对象即可，该状态对象会负责渲染它自身的行为")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("区分事物内部的状态，把事物的每种状态都封装成单独的类，跟此种状态有关的行为都被封装在这个类的内部")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("以一个人的工作状态作为例子，在刚醒、精神、疲倦几个状态中切换着")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 工作状态\nfunction Work(name) {\n    this.name = name;\n    this.currentState = null;\n\n    // 工作状态，保存为对应状态对象\n    this.wakeUpState = new WakeUpState(this);\n    // 精神饱满\n    this.energeticState = new EnergeticState(this);\n    // 疲倦\n    this.tiredState = new TiredState(this);\n\n    this.init();\n}\n\nWork.prototype.init = function() {\n    this.currentState = this.wakeUpState;\n    \n    // 点击事件，用于触发更新状态\n    document.body.onclick = () => {\n        this.currentState.behaviour();\n    };\n};\n\n// 更新工作状态\nWork.prototype.setState = function(state) {\n    this.currentState = state;\n}\n\n// 刚醒\nfunction WakeUpState(work) {\n    this.work = work;\n}\n\n// 刚醒的行为\nWakeUpState.prototype.behaviour = function() {\n    console.log(this.work.name, ':', '刚醒呢，睡个懒觉先');\n    \n    // 只睡了2秒钟懒觉就精神了..\n    setTimeout(() => {\n        this.work.setState(this.work.energeticState);\n    }, 2 * 1000);\n}\n\n// 精神饱满\nfunction EnergeticState(work) {\n    this.work = work;\n}\n\nEnergeticState.prototype.behaviour = function() {\n    console.log(this.work.name, ':', '超级精神的');\n    \n    // 才精神1秒钟就发困了\n    setTimeout(() => {\n        this.work.setState(this.work.tiredState);\n    }, 1000);\n};\n\n// 疲倦\nfunction TiredState(work) {\n    this.work = work;\n}\n\nTiredState.prototype.behaviour = function() {\n    console.log(this.work.name, ':', '怎么肥事，好困');\n    \n    // 不知不觉，又变成了刚醒着的状态... 不断循环呀\n    setTimeout(() => {\n        this.work.setState(this.work.wakeUpState);\n    }, 1000);\n};\n\n\nvar work = new Work('曹操');\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("p",[n._v("点击一下页面，触发更新状态的操作")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images2018.cnblogs.com/blog/688270/201808/688270-20180810223020756-1949601941.png",alt:"img"}})]),n._v(" "),e("p",[e("strong",[n._v("4. 优缺点")])]),n._v(" "),e("p",[e("strong",[n._v("优点")])]),n._v(" "),e("p",[n._v("状态切换的逻辑分布在状态类中，易于维护")]),n._v(" "),e("p",[e("strong",[n._v("缺点")])]),n._v(" "),e("p",[n._v("多个状态类，对于性能来说，也是一个缺点，这个缺点可以使用享元模式来做进一步优化")]),n._v(" "),e("p",[n._v("将逻辑分散在状态类中，可能不会很轻易就能看出状态机的变化逻辑")]),n._v(" "),e("h2",{attrs:{id:"十四、适配器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十四、适配器模式"}},[n._v("#")]),n._v(" 十四、适配器模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("是解决两个软件实体间的接口不兼容的问题，对不兼容的部分进行适配")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("解决两个已有接口之间不匹配的问题")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("比如一个简单的数据格式转换的适配器")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 渲染数据，格式限制为数组了\nfunction renderData(data) {\n    data.forEach(function(item) {\n        console.log(item);\n    });\n}\n\n// 对非数组的进行转换适配\nfunction arrayAdapter(data) {\n    if (typeof data !== 'object') {\n        return [];\n    }\n\n    if (Object.prototype.toString.call(data) === '[object Array]') {\n        return data;\n    }\n\n    var temp = [];\n\n    for (var item in data) {\n        if (data.hasOwnProperty(item)) {\n            temp.push(data[item]);\n        }\n    }\n\n    return temp;\n}\n\nvar data = {\n    0: 'A',\n    1: 'B',\n    2: 'C'\n};\n\nrenderData(arrayAdapter(data)); // A B C\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("h2",{attrs:{id:"十五、外观模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十五、外观模式"}},[n._v("#")]),n._v(" 十五、外观模式")]),n._v(" "),e("p",[e("strong",[n._v("1. 定义")])]),n._v(" "),e("p",[n._v("为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使子系统更加容易使用")]),n._v(" "),e("p",[e("strong",[n._v("2. 核心")])]),n._v(" "),e("p",[n._v("可以通过请求外观接口来达到访问子系统，也可以选择越过外观来直接访问子系统")]),n._v(" "),e("p",[e("strong",[n._v("3. 实现")])]),n._v(" "),e("p",[n._v("外观模式在JS中，可以认为是一组函数的集合")]),n._v(" "),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 三个处理函数\nfunction start() {\n    console.log('start');\n}\n\nfunction doing() {\n    console.log('doing');\n}\n\nfunction end() {\n    console.log('end');\n}\n\n// 外观函数，将一些处理统一起来，方便调用\nfunction execute() {\n    start();\n    doing();\n    end();\n}\n\n\n// 调用init开始执行\nfunction init() {\n    // 此处直接调用了高层函数，也可以选择越过它直接调用相关的函数\n    execute();\n}\n\ninit(); // start doing end\n")])])]),e("p",[n._v("["),e("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")])])}),[],!1,null,null,null);t.default=s.exports}}]);